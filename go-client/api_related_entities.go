
/*
 * Catalog Services API
 *
 * Catalog Services Web API Documentation
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type RelatedEntitiesApiService service

/* 
RelatedEntitiesApiService Returns a set of entities that are related to a given entity.
Used for interrogating instances using the T_RelatedEntityRule pattern and the TRelated_Contextual_Entity_Rule.  &lt;para&gt;&lt;/para&gt;  There are two flavours of this operation. It can retrieve the information about the relations based upon two different conditions:  &lt;para&gt;&lt;/para&gt;  • Related entities based upon the Type(s) of the relation. This will return all elements which match the types passed.  &lt;para&gt;&lt;/para&gt;  • Related entities based upon element names. This will return the data from these specific elements only.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *RelatedEntitiesApiApiRelatedEntitiesGetOpts - Optional Parameters:
     * @param "Id" (optional.String) -  entityId is the GUID of the entity being queried.
     * @param "RelationTypes" (optional.String) -  relationTypes is a comma separated list of types of relation or element names.
     * @param "RequestType" (optional.String) -  requestType indicates whether the relation types contains “types” or “elements” according to the value passed here.


*/

type RelatedEntitiesApiApiRelatedEntitiesGetOpts struct { 
	Id optional.String
	RelationTypes optional.String
	RequestType optional.String
}

func (a *RelatedEntitiesApiService) ApiRelatedEntitiesGet(ctx context.Context, localVarOptionals *RelatedEntitiesApiApiRelatedEntitiesGetOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/RelatedEntities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Id.IsSet() {
		localVarQueryParams.Add("id", parameterToString(localVarOptionals.Id.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RelationTypes.IsSet() {
		localVarQueryParams.Add("relationTypes", parameterToString(localVarOptionals.RelationTypes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RequestType.IsSet() {
		localVarQueryParams.Add("requestType", parameterToString(localVarOptionals.RequestType.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}


	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
