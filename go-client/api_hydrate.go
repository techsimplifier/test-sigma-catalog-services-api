/*
 * Catalog Services API
 *
 * Catalog Services Web API Documentation
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type HydrateApiService service

/*
HydrateApiService Validates a supplied Product Candidate as per the Validation resource and   return a hydrated product containing only the commercial data and no technical data  Note: Technical items are excluded unless explicitly included in the input candidate
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *HydrateApiApiProductcandidateGetcommerciallyhydratedproductPostOpts - Optional Parameters:
     * @param "ProductCandidate" (optional.Interface of ProductCandidateDecomposeRequest) -


*/

type HydrateApiApiProductcandidateGetcommerciallyhydratedproductPostOpts struct {
	ProductCandidate optional.Interface
}

func (a *HydrateApiService) ApiProductcandidateGetcommerciallyhydratedproductPost(ctx context.Context, localVarOptionals *HydrateApiApiProductcandidateGetcommerciallyhydratedproductPostOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/productcandidate/getcommerciallyhydratedproduct"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.ProductCandidate.IsSet() {

		localVarOptionalProductCandidate, localVarOptionalProductCandidateok := localVarOptionals.ProductCandidate.Value().(ProductCandidateDecomposeRequest)
		if !localVarOptionalProductCandidateok {
			return nil, reportError("productCandidate should be ProductCandidateDecomposeRequest")
		}
		localVarPostBody = &localVarOptionalProductCandidate
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
HydrateApiService Validates a supplied Product Candidate as per the Validation resource and   return a hydrated product containing only the commercial data and no technical data  Note: Technical items are excluded unless explicitly included in the input candidate
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *HydrateApiApiProductcandidateGetcommerciallyhydratedproductwithoutvalidatingPostOpts - Optional Parameters:
     * @param "ProductCandidate" (optional.Interface of ProductCandidateDecomposeRequest) -


*/

type HydrateApiApiProductcandidateGetcommerciallyhydratedproductwithoutvalidatingPostOpts struct {
	ProductCandidate optional.Interface
}

func (a *HydrateApiService) ApiProductcandidateGetcommerciallyhydratedproductwithoutvalidatingPost(ctx context.Context, localVarOptionals *HydrateApiApiProductcandidateGetcommerciallyhydratedproductwithoutvalidatingPostOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/productcandidate/getcommerciallyhydratedproductwithoutvalidating"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.ProductCandidate.IsSet() {

		localVarOptionalProductCandidate, localVarOptionalProductCandidateok := localVarOptionals.ProductCandidate.Value().(ProductCandidateDecomposeRequest)
		if !localVarOptionalProductCandidateok {
			return nil, reportError("productCandidate should be ProductCandidateDecomposeRequest")
		}
		localVarPostBody = &localVarOptionalProductCandidate
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
HydrateApiService Validates a supplied Product Candidate as per the Validation resource and return a structure representing a fully hydrated Product XML made up of the user selected options.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *HydrateApiApiProductcandidateGetfullyhydratedproductBVPostOpts - Optional Parameters:
     * @param "ProductCandidate" (optional.Interface of ProductCandidateDecomposeRequest) -  A xml/json object that contains a product candidate.


*/

type HydrateApiApiProductcandidateGetfullyhydratedproductBVPostOpts struct {
	ProductCandidate optional.Interface
}

func (a *HydrateApiService) ApiProductcandidateGetfullyhydratedproductBVPost(ctx context.Context, localVarOptionals *HydrateApiApiProductcandidateGetfullyhydratedproductBVPostOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/productcandidate/getfullyhydratedproductBV"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.ProductCandidate.IsSet() {

		localVarOptionalProductCandidate, localVarOptionalProductCandidateok := localVarOptionals.ProductCandidate.Value().(ProductCandidateDecomposeRequest)
		if !localVarOptionalProductCandidateok {
			return nil, reportError("productCandidate should be ProductCandidateDecomposeRequest")
		}
		localVarPostBody = &localVarOptionalProductCandidate
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
HydrateApiService Validates a supplied Product Candidate as per the Validation resource and return a structure representing a fully hydrated Product XML made up of the user selected options.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *HydrateApiApiProductcandidateGetfullyhydratedproductPostOpts - Optional Parameters:
     * @param "ProductCandidate" (optional.Interface of ProductCandidateDecomposeRequest) -  A xml/json object that contains a product candidate.


*/

type HydrateApiApiProductcandidateGetfullyhydratedproductPostOpts struct {
	ProductCandidate optional.Interface
}

func (a *HydrateApiService) ApiProductcandidateGetfullyhydratedproductPost(ctx context.Context, localVarOptionals *HydrateApiApiProductcandidateGetfullyhydratedproductPostOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/productcandidate/getfullyhydratedproduct"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.ProductCandidate.IsSet() {

		localVarOptionalProductCandidate, localVarOptionalProductCandidateok := localVarOptionals.ProductCandidate.Value().(ProductCandidateDecomposeRequest)
		if !localVarOptionalProductCandidateok {
			return nil, reportError("productCandidate should be ProductCandidateDecomposeRequest")
		}
		localVarPostBody = &localVarOptionalProductCandidate
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
HydrateApiService Validates a supplied Product Candidate as per the Validation resource and return a structure representing a fully hydrated Product XML made up of the user selected options.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *HydrateApiApiProductcandidateGetfullyhydratedproductwithoutvalidatingPostOpts - Optional Parameters:
     * @param "ProductCandidate" (optional.Interface of ProductCandidateDecomposeRequest) -  A xml/json object that contains a product candidate.


*/

type HydrateApiApiProductcandidateGetfullyhydratedproductwithoutvalidatingPostOpts struct {
	ProductCandidate optional.Interface
}

func (a *HydrateApiService) ApiProductcandidateGetfullyhydratedproductwithoutvalidatingPost(ctx context.Context, localVarOptionals *HydrateApiApiProductcandidateGetfullyhydratedproductwithoutvalidatingPostOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/productcandidate/getfullyhydratedproductwithoutvalidating"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.ProductCandidate.IsSet() {

		localVarOptionalProductCandidate, localVarOptionalProductCandidateok := localVarOptionals.ProductCandidate.Value().(ProductCandidateDecomposeRequest)
		if !localVarOptionalProductCandidateok {
			return nil, reportError("productCandidate should be ProductCandidateDecomposeRequest")
		}
		localVarPostBody = &localVarOptionalProductCandidate
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
HydrateApiService Validates a supplied Product Candidate as per the Validation resource and return a structure representing a fully hydrated commercial Product XML with technical ambiguities included
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *HydrateApiApiProductcandidateGettechnicallyhydratedproductPostOpts - Optional Parameters:
     * @param "ProductCandidate" (optional.Interface of ProductCandidateDecomposeRequest) -  A xml/json object that contains a product candidate.


*/

type HydrateApiApiProductcandidateGettechnicallyhydratedproductPostOpts struct {
	ProductCandidate optional.Interface
}

func (a *HydrateApiService) ApiProductcandidateGettechnicallyhydratedproductPost(ctx context.Context, localVarOptionals *HydrateApiApiProductcandidateGettechnicallyhydratedproductPostOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/productcandidate/gettechnicallyhydratedproduct"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.ProductCandidate.IsSet() {

		localVarOptionalProductCandidate, localVarOptionalProductCandidateok := localVarOptionals.ProductCandidate.Value().(ProductCandidateDecomposeRequest)
		if !localVarOptionalProductCandidateok {
			return nil, reportError("productCandidate should be ProductCandidateDecomposeRequest")
		}
		localVarPostBody = &localVarOptionalProductCandidate
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
HydrateApiService Validates a supplied Product Candidate as per the Validation resource and return a structure representing a fully hydrated commercial Product XML with technical ambiguities included
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *HydrateApiApiProductcandidateGettechnicallyhydratedproductwithoutvalidatingPostOpts - Optional Parameters:
     * @param "ProductCandidate" (optional.Interface of ProductCandidateDecomposeRequest) -  A xml/json object that contains a product candidate.


*/

type HydrateApiApiProductcandidateGettechnicallyhydratedproductwithoutvalidatingPostOpts struct {
	ProductCandidate optional.Interface
}

func (a *HydrateApiService) ApiProductcandidateGettechnicallyhydratedproductwithoutvalidatingPost(ctx context.Context, localVarOptionals *HydrateApiApiProductcandidateGettechnicallyhydratedproductwithoutvalidatingPostOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/productcandidate/gettechnicallyhydratedproductwithoutvalidating"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json", "application/xml", "text/xml", "application/_*+xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.ProductCandidate.IsSet() {

		localVarOptionalProductCandidate, localVarOptionalProductCandidateok := localVarOptionals.ProductCandidate.Value().(ProductCandidateDecomposeRequest)
		if !localVarOptionalProductCandidateok {
			return nil, reportError("productCandidate should be ProductCandidateDecomposeRequest")
		}
		localVarPostBody = &localVarOptionalProductCandidate
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}
